const {Tree, TreeNode} = require('../trees/Tree')

test('New treenode should have a null root', ()=> {
    var tree = new Tree()
    expect(tree.root).toBe(null)
})
test('New treenode should have a null root', () => {
    var root = new TreeNode('Root')
    var tree = new Tree(root)

    expect(tree.root.value).toBe('Root')
})
test('Child add should maintain structure', () => {
    var root = new TreeNode('Root')
    var root_childA = new TreeNode('Root - ChildA')
    var root_childB = new TreeNode('Root - ChildB')
    var root_childC = new TreeNode('Root - ChildC')
    var root_childA_childA = new TreeNode('Root - ChildA - ChildA')
    var root_childA_childB = new TreeNode('Root - ChildA - ChildB')
    var root_childA_childC = new TreeNode('Root - ChildA - ChildC')
    var root_childB_childA = new TreeNode('Root - ChildB - ChildA')
    var root_childB_childB = new TreeNode('Root - ChildB - ChildB')

    root.addChild(root_childA)
    root.addChild(root_childB)
    root.addChild(root_childC)
    root_childA.addChild(root_childA_childA)
    root_childA.addChild(root_childA_childB)
    root_childA.addChild(root_childA_childC)
    root_childB.addChild(root_childB_childA)
    root_childB.addChild(root_childB_childB)

    expect(root.children[0].value).toBe('Root - ChildA')
    expect(root.children[1].value).toBe('Root - ChildB')
    expect(root.children[2].value).toBe('Root - ChildC')
    expect(root.children[0].children[0].value).toBe('Root - ChildA - ChildA')
    expect(root.children[0].children[1].value).toBe('Root - ChildA - ChildB')
    expect(root.children[0].children[2].value).toBe('Root - ChildA - ChildC')
    expect(root.children[1].children[0].value).toBe('Root - ChildB - ChildA')
    expect(root.children[1].children[1].value).toBe('Root - ChildB - ChildB')
})
test('Child remove should search correctly inside tree', () => {
    var root = new TreeNode('Root')
    var root_childA = new TreeNode('Root - ChildA')
    var root_childB = new TreeNode('Root - ChildB')
    var root_childC = new TreeNode('Root - ChildC')
    var root_childA_childA = new TreeNode('Root - ChildA - ChildA')
    var root_childA_childB = new TreeNode('Root - ChildA - ChildB')
    var root_childA_childC = new TreeNode('Root - ChildA - ChildC')
    var root_childB_childA = new TreeNode('Root - ChildB - ChildA')
    var root_childB_childB = new TreeNode('Root - ChildB - ChildB')

    root.addChild(root_childA)
    root.addChild(root_childB)
    root.addChild(root_childC)
    root_childA.addChild(root_childA_childA)
    root_childA.addChild(root_childA_childB)
    root_childA.addChild(root_childA_childC)
    root_childB.addChild(root_childB_childA)
    root_childB.addChild(root_childB_childB)

    root.removeChild(root_childA)
    expect(root.children[0].value).toBe('Root - ChildB')  

    root_childB.removeChild(root_childB_childA)
    expect(root.children[0].children[0].value).toBe('Root - ChildB - ChildB')
})